{"version":3,"sources":["components/ButtonAppBar.tsx","containers/ButtonAppBar.ts","components/ShoppingListItem.tsx","components/ShoppingList.tsx","features/list/listSlice.ts","containers/ShoppingListContainer.ts","components/App.tsx","serviceWorker.ts","features/socketio/socketIOSlice.ts","reducers/index.ts","middleware/socket.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","props","classes","className","AppBar","position","Toolbar","IconButton","color","aria-label","Typography","variant","connected","Button","ButtonAppBarContainer","connect","state","socketio","connector","ShoppingListItem","value","checked","onClick","onEdit","ListItem","role","undefined","button","ListItemIcon","Checkbox","edge","tabIndex","onChange","ListItemText","primary","list","listStyleType","padding","width","backgroundColor","palette","background","paper","ShoppingList","items","onItemClick","onItemEdit","onItemAdd","List","Input","placeholder","disableUnderline","onKeyDown","e","key","currentTarget","map","id","item","event","target","now","Date","toISOString","initialState","updated","listSlice","createSlice","name","reducers","addItem","reducer","action","payload","created","push","prepare","uuidv4","meta","send","editItem","toggleItem","replaceAll","actions","ShoppingListContainer","dispatch","content","marginTop","createMuiTheme","type","App","ThemeProvider","CssBaseline","Container","maxWidth","Paper","elevation","Boolean","window","location","hostname","match","socketIOSlice","reconnecting","supplies","combineReducers","listReducer","socketIOReducer","socket","store","next","Socket","channel","join","receive","resp","a","localforage","getItem","forEach","console","log","setItem","reply","onError","on","getState","then","config","storage","persistReducer","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1779e851.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar'\nimport { Props } from '../containers/ButtonAppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\n\nconst ButtonAppBar = (props: Props) => {\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"Menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.title}>\n            Shopping\n          </Typography>\n          <Typography color=\"inherit\">{props.connected ? \"Connected\" : \"Connecting\"}</Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n};\n\nexport default ButtonAppBar;\n","import { connect, ConnectedProps } from 'react-redux';\nimport ButtonAppBar from '../components/ButtonAppBar';\nimport { RootState } from '../reducers'\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    connected: state.socketio.connected\n  };\n};\n\nconst connector = connect(mapStateToProps)\nexport type Props = ConnectedProps<typeof connector>\n\nconst ButtonAppBarContainer = connector(ButtonAppBar);\n\nexport default ButtonAppBarContainer;\n","import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\ninterface ShoppingListItemProps {\n  value?: string,\n  checked?: boolean,\n  onClick?: { (event: React.ChangeEvent<HTMLInputElement>, checked: boolean): void },\n  onEdit: { (event: React.ChangeEvent<HTMLInputElement>): void }\n}\n\nconst ShoppingListItem = ({ value, checked, onClick, onEdit }: ShoppingListItemProps) => (\n  <ListItem role={undefined} button>\n    <ListItemIcon>\n      <Checkbox edge=\"start\" tabIndex={-1} checked={checked} onChange={onClick} />\n    </ListItemIcon>\n    <ListItemText primary={value}></ListItemText>\n    {/* <div>\n      <Input\n        placeholder=\"Add Item\"\n        disableUnderline={true}\n        value={value}\n        onChange={onEdit}\n      />\n    </div>\n    <Divider /> */}\n  </ListItem>\n);\n\nexport default ShoppingListItem;\n","import React from 'react';\nimport ShoppingListItem from './ShoppingListItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Props } from '../containers/ShoppingListContainer'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Input from '@material-ui/core/Input'\nimport AddIcon from '@material-ui/icons/Add';\n\nconst useStyles = makeStyles((theme) => ({\n  list: {\n    listStyleType: 'none',\n    padding: 0\n  },\n  root: {\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nconst ShoppingList = ({\n  items,\n  onItemClick,\n  onItemEdit,\n  onItemAdd\n}: Props) => {\n  const classes = useStyles()\n  return (\n    <List className={classes.root}>\n      <ListItem role={undefined}>\n        <ListItemIcon>\n          <AddIcon />\n        </ListItemIcon>\n        <Input\n          placeholder=\"Add Item\"\n          disableUnderline={true}\n          onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => { if (e.key === \"Enter\") { onItemAdd(e.currentTarget.value); e.currentTarget.value = \"\" } }}\n        />\n      </ListItem>\n      {items.list.map(id => {\n        const item = items.items[id];\n        return (\n          <ShoppingListItem\n            key={item.id}\n            checked={item.checked}\n            value={item.value}\n            onClick={(event, checked) => onItemClick(item.id, checked)}\n            onEdit={event => onItemEdit(item.id, event.target.value)}\n          />\n        )\n      })}\n      {/* <ShoppingListItem onEdit={event => onItemAdd(event.target.value)} /> */}\n    </List>\n  )\n};\n\nexport default ShoppingList;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface ServerAction {\n    meta: {\n        send: boolean\n    }\n}\n\ninterface AddItem extends ServerAction {\n    id: string\n    updated: string\n    value: string\n    created: string\n}\n\ninterface EditItem extends ServerAction {\n    id: string\n    updated: string\n    value: string\n}\n\ninterface ToggleItem extends ServerAction {\n    id: string\n    checked: boolean\n    updated: string\n}\n\ninterface Item {\n    id: string,\n    value: string\n    checked: boolean\n    created: string\n}\n\ninterface ShoppingListState {\n    list: string[]\n    updated: string\n    items: {\n        [id: string]: Item\n    }\n}\n\nlet now = () => new Date().toISOString();\n\nconst initialState: ShoppingListState = {\n    list: [],\n    items: {},\n    updated: new Date().toISOString()\n}\n\nconst listSlice = createSlice({\n    name: 'items',\n    initialState: initialState,\n    reducers: {\n        addItem: {\n            reducer(state, action: PayloadAction<AddItem>) {\n                const { id, value, updated, created } = action.payload;\n                state.items[id] = { id: id, value: value, checked: false, created: created };\n                state.list.push(id);\n                state.updated = updated;\n            }, prepare(value: string) {\n                return { payload: { id: uuidv4(), updated: now(), value: value, created: now(), meta: { send: true } } }\n            }\n        },\n        editItem: {\n            reducer(state, action: PayloadAction<EditItem>) {\n                const { id, value, updated } = action.payload;\n                state.items[id].value = value;\n                state.updated = updated;\n            },\n            prepare(id: string, value: string) {\n                return { payload: { id: id, updated: now(), value: value, meta: { send: true } } }\n            }\n        },\n        toggleItem: {\n            reducer(state, action: PayloadAction<ToggleItem>) {\n                const { id, checked, updated } = action.payload;\n                state.items[id].checked = checked;\n                state.updated = updated;\n            },\n            prepare(id: string, checked: boolean) {\n                return { payload: { id: id, checked: checked, updated: now(), meta: { send: true } } }\n            }\n        },\n        replaceAll(state, action: PayloadAction<ShoppingListState>) {\n            state.items = action.payload.items;\n            state.list = action.payload.list;\n            state.updated = action.payload.updated;\n        }\n    }\n})\n\nexport const { addItem, editItem, toggleItem, replaceAll } = listSlice.actions\n\nexport default listSlice.reducer","import { connect, ConnectedProps } from 'react-redux';\nimport ShoppingList from '../components/ShoppingList';\nimport { addItem, editItem, toggleItem } from '../features/list/listSlice';\nimport { RootState } from '../reducers'\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    items: state.items\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    onItemClick: (id: string, checked: boolean) => {\n      dispatch(toggleItem(id, checked));\n    },\n    onItemAdd: (value: string) => {\n      dispatch(addItem(value));\n    },\n    onItemEdit: (id: string, value: string) => {\n      dispatch(editItem(id, value));\n    }\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps)\nexport type Props = ConnectedProps<typeof connector>\n\nconst ShoppingListContainer = connector(\n  ShoppingList\n);\n\nexport default ShoppingListContainer;\n","import React from 'react';\nimport ButtonAppBarContainer from '../containers/ButtonAppBar'\nimport ShoppingListContainer from '../containers/ShoppingListContainer'\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    marginTop: 50\n  },\n}));\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark'\n  },\n});\n\nfunction App() {\n  const classes = useStyles()\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <ButtonAppBarContainer />\n      <Container maxWidth=\"sm\">\n        <Paper className={classes.content} elevation={1}>\n          <ShoppingListContainer />\n        </Paper>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createSlice, Action } from '@reduxjs/toolkit'\n\n\ninterface SocketIOState {\n    connected: boolean\n}\n\nconst initialState: SocketIOState = {\n    connected: false\n}\n\nconst socketIOSlice = createSlice({\n    name: 'socketio',\n    initialState: initialState,\n    reducers: {\n        connected(state, action: Action) {\n            state.connected = true\n        },\n        reconnecting(state, action: Action) {\n            state.connected = false\n        }\n    }\n})\n\nexport const { connected, reconnecting } = socketIOSlice.actions\n\nexport default socketIOSlice.reducer","import { combineReducers } from 'redux';\nimport listReducer from '../features/list/listSlice'\nimport socketIOReducer from '../features/socketio/socketIOSlice'\n\nexport const supplies = combineReducers({\n  items: listReducer,\n  socketio: socketIOReducer\n});\n\nexport type RootState = ReturnType<typeof supplies>\n","import { Middleware, PayloadAction, Action } from \"@reduxjs/toolkit\";\nimport socketIOClient from \"socket.io-client\";\nimport { ServerAction, replaceAll } from \"../features/list/listSlice\";\nimport localforage from \"localforage\"\nimport { Socket } from 'phoenix';\n\n\nconst socket: Middleware = store => next => {\n    const socket = new Socket(\"ws://192.168.1.157:4000/socket\")\n    socket.connect()\n    let channel = socket.channel(\"shoppinglist\", {})\n    channel.join().receive('ok', async resp => {\n        const actions: PayloadAction<ServerAction>[] | null = await localforage.getItem(\"unsentActions\")\n        if (actions) {\n            actions.forEach(action => {\n                console.log(\"send\", action)\n                channel.push(action.type, action)\n            });\n            await localforage.setItem(\"unsentActions\", [])\n        }\n        store.dispatch({ type: \"socketio/connected\" });\n        console.log(\"Request the state\")\n        channel.push(\"items/fullList\", {}).receive('ok', (reply) => {\n            console.log(reply);\n            store.dispatch(replaceAll(reply));\n        })\n    }).receive(\"error\", resp => {\n        console.log(\"Something went wrong\", resp)\n    })\n    channel.onError((resp) => { store.dispatch({ type: 'socketio/reconnecting' }) })\n    channel.on(\"items/toggleItem\", (action: PayloadAction<ServerAction>) => {\n        console.log(action);\n        action.payload.meta.send = false;\n        store.dispatch(action);\n    });\n    channel.on(\"items/addItem\", (action: PayloadAction<ServerAction>) => {\n        console.log(action);\n        action.payload.meta.send = false;\n        store.dispatch(action);\n    });\n    channel.on(\"items/editItem\", (action: PayloadAction<ServerAction>) => {\n        console.log(action);\n        action.payload.meta.send = false;\n        store.dispatch(action);\n    });\n    return (action: any) => {\n        if (action?.payload?.meta?.send) {\n            if (!store.getState().socketio.connected) {\n                console.log(\"We lost this :(\")\n                localforage.getItem<Action[] | null>(\"unsentActions\").then((value) => {\n                    console.log(\"Adding\", value)\n                    if (value === null) {\n                        value = []\n                    }\n                    value.push(action)\n                    localforage.setItem(\"unsentActions\", value)\n                })\n            } else {\n                channel.push(action.type, action)\n            }\n        }\n\n        return next(action);\n    }\n}\n\nexport default socket;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport storage from 'redux-persist/es/storage';\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\nimport { RootState, supplies } from './reducers'\nimport { Provider, } from 'react-redux';\nimport { PersistGate } from 'redux-persist/es/integration/react';\nimport { configureStore, getDefaultMiddleware, Action, Middleware, PayloadAction } from '@reduxjs/toolkit'\nimport socket from './middleware/socket'\nimport localforage from 'localforage'\n\nconst config = {\n  key: 'supplies',\n  storage: localforage\n};\nconst reducer = persistReducer<RootState, Action>(config, supplies);\n\nlet store = configureStore({\n  reducer: reducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  }).concat(socket)\n});\nlet persistor = persistStore(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode >,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}